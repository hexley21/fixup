// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/service/auth.go
//
// Generated by this command:
//
//	mockgen -source=internal/user/service/auth.go -destination=internal/user/service/mock/mock_auth.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	time "time"

	enum "github.com/hexley21/fixup/internal/common/enum"
	domain "github.com/hexley21/fixup/internal/user/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// AuthenticateUser mocks base method.
func (m *MockAuthService) AuthenticateUser(ctx context.Context, email, password string) (domain.UserIdentity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", ctx, email, password)
	ret0, _ := ret[0].(domain.UserIdentity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockAuthServiceMockRecorder) AuthenticateUser(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockAuthService)(nil).AuthenticateUser), ctx, email, password)
}

// GetAccountInfo mocks base method.
func (m *MockAuthService) GetAccountInfo(ctx context.Context, id int64) (domain.UserAccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInfo", ctx, id)
	ret0, _ := ret[0].(domain.UserAccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInfo indicates an expected call of GetAccountInfo.
func (mr *MockAuthServiceMockRecorder) GetAccountInfo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInfo", reflect.TypeOf((*MockAuthService)(nil).GetAccountInfo), ctx, id)
}

// RefreshUserToken mocks base method.
func (m *MockAuthService) RefreshUserToken(ctx context.Context, id int64, tokenFunc func(enum.UserRole, bool) (string, error)) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshUserToken", ctx, id, tokenFunc)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshUserToken indicates an expected call of RefreshUserToken.
func (mr *MockAuthServiceMockRecorder) RefreshUserToken(ctx, id, tokenFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshUserToken", reflect.TypeOf((*MockAuthService)(nil).RefreshUserToken), ctx, id, tokenFunc)
}

// RegisterCustomer mocks base method.
func (m *MockAuthService) RegisterCustomer(ctx context.Context, password string, personalInfo *domain.UserPersonalInfo) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterCustomer", ctx, password, personalInfo)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterCustomer indicates an expected call of RegisterCustomer.
func (mr *MockAuthServiceMockRecorder) RegisterCustomer(ctx, password, personalInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCustomer", reflect.TypeOf((*MockAuthService)(nil).RegisterCustomer), ctx, password, personalInfo)
}

// RegisterProvider mocks base method.
func (m *MockAuthService) RegisterProvider(ctx context.Context, password, personalIdNumber string, personalInfo *domain.UserPersonalInfo) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterProvider", ctx, password, personalIdNumber, personalInfo)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterProvider indicates an expected call of RegisterProvider.
func (mr *MockAuthServiceMockRecorder) RegisterProvider(ctx, password, personalIdNumber, personalInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterProvider", reflect.TypeOf((*MockAuthService)(nil).RegisterProvider), ctx, password, personalIdNumber, personalInfo)
}

// ResendVerificationLetter mocks base method.
func (m *MockAuthService) ResendVerificationLetter(ctx context.Context, tokenFunc func(int64) (string, error), email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendVerificationLetter", ctx, tokenFunc, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResendVerificationLetter indicates an expected call of ResendVerificationLetter.
func (mr *MockAuthServiceMockRecorder) ResendVerificationLetter(ctx, tokenFunc, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendVerificationLetter", reflect.TypeOf((*MockAuthService)(nil).ResendVerificationLetter), ctx, tokenFunc, email)
}

// SendVerificationLetter mocks base method.
func (m *MockAuthService) SendVerificationLetter(ctx context.Context, token, email, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationLetter", ctx, token, email, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationLetter indicates an expected call of SendVerificationLetter.
func (mr *MockAuthServiceMockRecorder) SendVerificationLetter(ctx, token, email, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationLetter", reflect.TypeOf((*MockAuthService)(nil).SendVerificationLetter), ctx, token, email, name)
}

// SendVerificationSuccessLetter mocks base method.
func (m *MockAuthService) SendVerificationSuccessLetter(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationSuccessLetter", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationSuccessLetter indicates an expected call of SendVerificationSuccessLetter.
func (mr *MockAuthServiceMockRecorder) SendVerificationSuccessLetter(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationSuccessLetter", reflect.TypeOf((*MockAuthService)(nil).SendVerificationSuccessLetter), email)
}

// VerifyUser mocks base method.
func (m *MockAuthService) VerifyUser(ctx context.Context, token string, ttl time.Duration, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", ctx, token, ttl, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockAuthServiceMockRecorder) VerifyUser(ctx, token, ttl, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockAuthService)(nil).VerifyUser), ctx, token, ttl, id)
}
