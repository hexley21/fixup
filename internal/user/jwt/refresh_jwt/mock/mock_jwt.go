// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/jwt/refresh_jwt/jwt.go
//
// Generated by this command:
//
//	mockgen -source=internal/user/jwt/refresh_jwt/jwt.go -destination=internal/user/jwt/refresh_jwt/mock/mock_jwt.go
//

// Package mock_refresh_jwt is a generated GoMock package.
package mock_refresh_jwt

import (
	reflect "reflect"

	refresh_jwt "github.com/hexley21/fixup/internal/user/jwt/refresh_jwt"
	rest "github.com/hexley21/fixup/pkg/http/rest"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTManager is a mock of JWTManager interface.
type MockJWTManager struct {
	ctrl     *gomock.Controller
	recorder *MockJWTManagerMockRecorder
}

// MockJWTManagerMockRecorder is the mock recorder for MockJWTManager.
type MockJWTManagerMockRecorder struct {
	mock *MockJWTManager
}

// NewMockJWTManager creates a new mock instance.
func NewMockJWTManager(ctrl *gomock.Controller) *MockJWTManager {
	mock := &MockJWTManager{ctrl: ctrl}
	mock.recorder = &MockJWTManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTManager) EXPECT() *MockJWTManagerMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockJWTManager) GenerateJWT(id string) (string, *rest.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*rest.ErrorResponse)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockJWTManagerMockRecorder) GenerateJWT(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockJWTManager)(nil).GenerateJWT), id)
}

// VerifyJWT mocks base method.
func (m *MockJWTManager) VerifyJWT(tokenString string) (refresh_jwt.RefreshClaims, *rest.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWT", tokenString)
	ret0, _ := ret[0].(refresh_jwt.RefreshClaims)
	ret1, _ := ret[1].(*rest.ErrorResponse)
	return ret0, ret1
}

// VerifyJWT indicates an expected call of VerifyJWT.
func (mr *MockJWTManagerMockRecorder) VerifyJWT(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWT", reflect.TypeOf((*MockJWTManager)(nil).VerifyJWT), tokenString)
}

// MockJWTGenerator is a mock of JWTGenerator interface.
type MockJWTGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockJWTGeneratorMockRecorder
}

// MockJWTGeneratorMockRecorder is the mock recorder for MockJWTGenerator.
type MockJWTGeneratorMockRecorder struct {
	mock *MockJWTGenerator
}

// NewMockJWTGenerator creates a new mock instance.
func NewMockJWTGenerator(ctrl *gomock.Controller) *MockJWTGenerator {
	mock := &MockJWTGenerator{ctrl: ctrl}
	mock.recorder = &MockJWTGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTGenerator) EXPECT() *MockJWTGeneratorMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockJWTGenerator) GenerateJWT(id string) (string, *rest.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*rest.ErrorResponse)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockJWTGeneratorMockRecorder) GenerateJWT(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockJWTGenerator)(nil).GenerateJWT), id)
}

// MockJWTVerifier is a mock of JWTVerifier interface.
type MockJWTVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockJWTVerifierMockRecorder
}

// MockJWTVerifierMockRecorder is the mock recorder for MockJWTVerifier.
type MockJWTVerifierMockRecorder struct {
	mock *MockJWTVerifier
}

// NewMockJWTVerifier creates a new mock instance.
func NewMockJWTVerifier(ctrl *gomock.Controller) *MockJWTVerifier {
	mock := &MockJWTVerifier{ctrl: ctrl}
	mock.recorder = &MockJWTVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTVerifier) EXPECT() *MockJWTVerifierMockRecorder {
	return m.recorder
}

// VerifyJWT mocks base method.
func (m *MockJWTVerifier) VerifyJWT(tokenString string) (refresh_jwt.RefreshClaims, *rest.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWT", tokenString)
	ret0, _ := ret[0].(refresh_jwt.RefreshClaims)
	ret1, _ := ret[1].(*rest.ErrorResponse)
	return ret0, ret1
}

// VerifyJWT indicates an expected call of VerifyJWT.
func (mr *MockJWTVerifierMockRecorder) VerifyJWT(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWT", reflect.TypeOf((*MockJWTVerifier)(nil).VerifyJWT), tokenString)
}
