// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/repository/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/user/repository/user.go -destination=internal/user/repository/mock/mock_user.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	repository "github.com/hexley21/fixup/internal/user/repository"
	postgres "github.com/hexley21/fixup/pkg/infra/postgres"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, arg repository.CreateUserParams) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, arg)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, arg)
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockUserRepository) Get(ctx context.Context, id int64) (repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), ctx, id)
}

// GetAccountInfo mocks base method.
func (m *MockUserRepository) GetAccountInfo(ctx context.Context, id int64) (repository.GetUserAccountInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountInfo", ctx, id)
	ret0, _ := ret[0].(repository.GetUserAccountInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountInfo indicates an expected call of GetAccountInfo.
func (mr *MockUserRepositoryMockRecorder) GetAccountInfo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountInfo", reflect.TypeOf((*MockUserRepository)(nil).GetAccountInfo), ctx, id)
}

// GetAuthInfoByEmail mocks base method.
func (m *MockUserRepository) GetAuthInfoByEmail(ctx context.Context, email string) (repository.GetUserAuthInfoByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthInfoByEmail", ctx, email)
	ret0, _ := ret[0].(repository.GetUserAuthInfoByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthInfoByEmail indicates an expected call of GetAuthInfoByEmail.
func (mr *MockUserRepositoryMockRecorder) GetAuthInfoByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthInfoByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetAuthInfoByEmail), ctx, email)
}

// GetHashById mocks base method.
func (m *MockUserRepository) GetHashById(ctx context.Context, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashById", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashById indicates an expected call of GetHashById.
func (mr *MockUserRepositoryMockRecorder) GetHashById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashById", reflect.TypeOf((*MockUserRepository)(nil).GetHashById), ctx, id)
}

// GetPicture mocks base method.
func (m *MockUserRepository) GetPicture(ctx context.Context, id int64) (pgtype.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPicture", ctx, id)
	ret0, _ := ret[0].(pgtype.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPicture indicates an expected call of GetPicture.
func (mr *MockUserRepositoryMockRecorder) GetPicture(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPicture", reflect.TypeOf((*MockUserRepository)(nil).GetPicture), ctx, id)
}

// GetVerificationInfo mocks base method.
func (m *MockUserRepository) GetVerificationInfo(ctx context.Context, email string) (repository.GetUserVerificationInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationInfo", ctx, email)
	ret0, _ := ret[0].(repository.GetUserVerificationInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationInfo indicates an expected call of GetVerificationInfo.
func (mr *MockUserRepositoryMockRecorder) GetVerificationInfo(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationInfo", reflect.TypeOf((*MockUserRepository)(nil).GetVerificationInfo), ctx, email)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, id int64, arg repository.UpdateUserRow) (repository.UpdateUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, arg)
	ret0, _ := ret[0].(repository.UpdateUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, id, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, id, arg)
}

// UpdateHash mocks base method.
func (m *MockUserRepository) UpdateHash(ctx context.Context, id int64, hash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHash", ctx, id, hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateHash indicates an expected call of UpdateHash.
func (mr *MockUserRepositoryMockRecorder) UpdateHash(ctx, id, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHash", reflect.TypeOf((*MockUserRepository)(nil).UpdateHash), ctx, id, hash)
}

// UpdatePicture mocks base method.
func (m *MockUserRepository) UpdatePicture(ctx context.Context, id int64, picture string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePicture", ctx, id, picture)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePicture indicates an expected call of UpdatePicture.
func (mr *MockUserRepositoryMockRecorder) UpdatePicture(ctx, id, picture any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePicture", reflect.TypeOf((*MockUserRepository)(nil).UpdatePicture), ctx, id, picture)
}

// UpdateVerification mocks base method.
func (m *MockUserRepository) UpdateVerification(ctx context.Context, id int64, verified bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerification", ctx, id, verified)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerification indicates an expected call of UpdateVerification.
func (mr *MockUserRepositoryMockRecorder) UpdateVerification(ctx, id, verified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerification", reflect.TypeOf((*MockUserRepository)(nil).UpdateVerification), ctx, id, verified)
}

// WithTx mocks base method.
func (m *MockUserRepository) WithTx(q postgres.PGXQuerier) repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", q)
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockUserRepositoryMockRecorder) WithTx(q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockUserRepository)(nil).WithTx), q)
}
