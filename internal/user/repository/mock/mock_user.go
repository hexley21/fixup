// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/repository/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/user/repository/user.go -destination=internal/user/repository/mock/mock_user.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/hexley21/fixup/internal/user/entity"
	repository "github.com/hexley21/fixup/internal/user/repository"
	postgres "github.com/hexley21/fixup/pkg/infra/postgres"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, arg repository.CreateUserParams) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, arg)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, arg)
}

// DeleteById mocks base method.
func (m *MockUserRepository) DeleteById(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockUserRepositoryMockRecorder) DeleteById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockUserRepository)(nil).DeleteById), ctx, id)
}

// GetById mocks base method.
func (m *MockUserRepository) GetById(ctx context.Context, id int64) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUserRepositoryMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUserRepository)(nil).GetById), ctx, id)
}

// GetCredentialsByEmail mocks base method.
func (m *MockUserRepository) GetCredentialsByEmail(ctx context.Context, email string) (repository.GetCredentialsByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsByEmail", ctx, email)
	ret0, _ := ret[0].(repository.GetCredentialsByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsByEmail indicates an expected call of GetCredentialsByEmail.
func (mr *MockUserRepositoryMockRecorder) GetCredentialsByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetCredentialsByEmail), ctx, email)
}

// GetHashById mocks base method.
func (m *MockUserRepository) GetHashById(ctx context.Context, id int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashById", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHashById indicates an expected call of GetHashById.
func (mr *MockUserRepositoryMockRecorder) GetHashById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashById", reflect.TypeOf((*MockUserRepository)(nil).GetHashById), ctx, id)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, arg repository.UpdateUserParams) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, arg)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, arg)
}

// UpdateHash mocks base method.
func (m *MockUserRepository) UpdateHash(ctx context.Context, arg repository.UpdateUserHashParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHash", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHash indicates an expected call of UpdateHash.
func (mr *MockUserRepositoryMockRecorder) UpdateHash(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHash", reflect.TypeOf((*MockUserRepository)(nil).UpdateHash), ctx, arg)
}

// UpdatePicture mocks base method.
func (m *MockUserRepository) UpdatePicture(ctx context.Context, arg repository.UpdateUserPictureParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePicture", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePicture indicates an expected call of UpdatePicture.
func (mr *MockUserRepositoryMockRecorder) UpdatePicture(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePicture", reflect.TypeOf((*MockUserRepository)(nil).UpdatePicture), ctx, arg)
}

// UpdateStatus mocks base method.
func (m *MockUserRepository) UpdateStatus(ctx context.Context, arg repository.UpdateUserStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockUserRepositoryMockRecorder) UpdateStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockUserRepository)(nil).UpdateStatus), ctx, arg)
}

// WithTx mocks base method.
func (m *MockUserRepository) WithTx(tx postgres.DBTX) repository.UserRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.UserRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockUserRepositoryMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockUserRepository)(nil).WithTx), tx)
}
