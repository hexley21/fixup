// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/repository/verification.go
//
// Generated by this command:
//
//	mockgen -source=internal/user/repository/verification.go -destination=internal/user/repository/mock/mock_verification.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockVerificationRepository is a mock of VerificationRepository interface.
type MockVerificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVerificationRepositoryMockRecorder
}

// MockVerificationRepositoryMockRecorder is the mock recorder for MockVerificationRepository.
type MockVerificationRepositoryMockRecorder struct {
	mock *MockVerificationRepository
}

// NewMockVerificationRepository creates a new mock instance.
func NewMockVerificationRepository(ctrl *gomock.Controller) *MockVerificationRepository {
	mock := &MockVerificationRepository{ctrl: ctrl}
	mock.recorder = &MockVerificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerificationRepository) EXPECT() *MockVerificationRepositoryMockRecorder {
	return m.recorder
}

// IsTokenUsed mocks base method.
func (m *MockVerificationRepository) IsTokenUsed(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenUsed", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTokenUsed indicates an expected call of IsTokenUsed.
func (mr *MockVerificationRepositoryMockRecorder) IsTokenUsed(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenUsed", reflect.TypeOf((*MockVerificationRepository)(nil).IsTokenUsed), ctx, token)
}

// SetTokenUsed mocks base method.
func (m *MockVerificationRepository) SetTokenUsed(ctx context.Context, token string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTokenUsed", ctx, token, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTokenUsed indicates an expected call of SetTokenUsed.
func (mr *MockVerificationRepositoryMockRecorder) SetTokenUsed(ctx, token, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTokenUsed", reflect.TypeOf((*MockVerificationRepository)(nil).SetTokenUsed), ctx, token, ttl)
}
