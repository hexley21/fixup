// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/common/jwt/auth_jwt.go
//
// Generated by this command:
//
//	mockgen -source=./internal/common/jwt/auth_jwt.go -destination=./internal/common/jwt/mock/mock_auth_jwt.go
//

// Package mock_jwt is a generated GoMock package.
package mock_jwt

import (
	reflect "reflect"

	jwt "github.com/hexley21/fixup/internal/common/jwt"
	gomock "go.uber.org/mock/gomock"
)

// MockJwt is a mock of Jwt interface.
type MockJwt struct {
	ctrl     *gomock.Controller
	recorder *MockJwtMockRecorder
}

// MockJwtMockRecorder is the mock recorder for MockJwt.
type MockJwtMockRecorder struct {
	mock *MockJwt
}

// NewMockJwt creates a new mock instance.
func NewMockJwt(ctrl *gomock.Controller) *MockJwt {
	mock := &MockJwt{ctrl: ctrl}
	mock.recorder = &MockJwtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwt) EXPECT() *MockJwtMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockJwt) GenerateJWT(id, role string, verified bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", id, role, verified)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockJwtMockRecorder) GenerateJWT(id, role, verified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockJwt)(nil).GenerateJWT), id, role, verified)
}

// VerifyJWT mocks base method.
func (m *MockJwt) VerifyJWT(tokenString string) (jwt.UserClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWT", tokenString)
	ret0, _ := ret[0].(jwt.UserClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyJWT indicates an expected call of VerifyJWT.
func (mr *MockJwtMockRecorder) VerifyJWT(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWT", reflect.TypeOf((*MockJwt)(nil).VerifyJWT), tokenString)
}

// MockJwtGenerator is a mock of JwtGenerator interface.
type MockJwtGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockJwtGeneratorMockRecorder
}

// MockJwtGeneratorMockRecorder is the mock recorder for MockJwtGenerator.
type MockJwtGeneratorMockRecorder struct {
	mock *MockJwtGenerator
}

// NewMockJwtGenerator creates a new mock instance.
func NewMockJwtGenerator(ctrl *gomock.Controller) *MockJwtGenerator {
	mock := &MockJwtGenerator{ctrl: ctrl}
	mock.recorder = &MockJwtGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtGenerator) EXPECT() *MockJwtGeneratorMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockJwtGenerator) GenerateJWT(id, role string, verified bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", id, role, verified)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockJwtGeneratorMockRecorder) GenerateJWT(id, role, verified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockJwtGenerator)(nil).GenerateJWT), id, role, verified)
}

// MockJwtVerifier is a mock of JwtVerifier interface.
type MockJwtVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockJwtVerifierMockRecorder
}

// MockJwtVerifierMockRecorder is the mock recorder for MockJwtVerifier.
type MockJwtVerifierMockRecorder struct {
	mock *MockJwtVerifier
}

// NewMockJwtVerifier creates a new mock instance.
func NewMockJwtVerifier(ctrl *gomock.Controller) *MockJwtVerifier {
	mock := &MockJwtVerifier{ctrl: ctrl}
	mock.recorder = &MockJwtVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtVerifier) EXPECT() *MockJwtVerifierMockRecorder {
	return m.recorder
}

// VerifyJWT mocks base method.
func (m *MockJwtVerifier) VerifyJWT(tokenString string) (jwt.UserClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWT", tokenString)
	ret0, _ := ret[0].(jwt.UserClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyJWT indicates an expected call of VerifyJWT.
func (mr *MockJwtVerifierMockRecorder) VerifyJWT(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWT", reflect.TypeOf((*MockJwtVerifier)(nil).VerifyJWT), tokenString)
}
