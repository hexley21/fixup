// Code generated by MockGen. DO NOT EDIT.
// Source: internal/catalog/service/subcategory.go
//
// Generated by this command:
//
//	mockgen -source=internal/catalog/service/subcategory.go -destination=internal/catalog/service/mock/mock_subcategory.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	domain "github.com/hexley21/fixup/internal/catalog/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSubcategoryService is a mock of SubcategoryService interface.
type MockSubcategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockSubcategoryServiceMockRecorder
}

// MockSubcategoryServiceMockRecorder is the mock recorder for MockSubcategoryService.
type MockSubcategoryServiceMockRecorder struct {
	mock *MockSubcategoryService
}

// NewMockSubcategoryService creates a new mock instance.
func NewMockSubcategoryService(ctrl *gomock.Controller) *MockSubcategoryService {
	mock := &MockSubcategoryService{ctrl: ctrl}
	mock.recorder = &MockSubcategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubcategoryService) EXPECT() *MockSubcategoryServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubcategoryService) Create(ctx context.Context, info domain.SubcategoryInfo) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, info)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubcategoryServiceMockRecorder) Create(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubcategoryService)(nil).Create), ctx, info)
}

// Delete mocks base method.
func (m *MockSubcategoryService) Delete(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubcategoryServiceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubcategoryService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockSubcategoryService) Get(ctx context.Context, id int32) (domain.Subcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.Subcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubcategoryServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubcategoryService)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockSubcategoryService) List(ctx context.Context, limit, offset int64) ([]domain.Subcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]domain.Subcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSubcategoryServiceMockRecorder) List(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSubcategoryService)(nil).List), ctx, limit, offset)
}

// ListByCategoryId mocks base method.
func (m *MockSubcategoryService) ListByCategoryId(ctx context.Context, categoryID int32, limit, offset int64) ([]domain.Subcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByCategoryId", ctx, categoryID, limit, offset)
	ret0, _ := ret[0].([]domain.Subcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByCategoryId indicates an expected call of ListByCategoryId.
func (mr *MockSubcategoryServiceMockRecorder) ListByCategoryId(ctx, categoryID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByCategoryId", reflect.TypeOf((*MockSubcategoryService)(nil).ListByCategoryId), ctx, categoryID, limit, offset)
}

// ListByTypeId mocks base method.
func (m *MockSubcategoryService) ListByTypeId(ctx context.Context, typeID int32, limit, offset int64) ([]domain.Subcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTypeId", ctx, typeID, limit, offset)
	ret0, _ := ret[0].([]domain.Subcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTypeId indicates an expected call of ListByTypeId.
func (mr *MockSubcategoryServiceMockRecorder) ListByTypeId(ctx, typeID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTypeId", reflect.TypeOf((*MockSubcategoryService)(nil).ListByTypeId), ctx, typeID, limit, offset)
}

// Update mocks base method.
func (m *MockSubcategoryService) Update(ctx context.Context, id int32, info domain.SubcategoryInfo) (domain.Subcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, info)
	ret0, _ := ret[0].(domain.Subcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSubcategoryServiceMockRecorder) Update(ctx, id, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubcategoryService)(nil).Update), ctx, id, info)
}
