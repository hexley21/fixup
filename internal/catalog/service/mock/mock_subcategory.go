// Code generated by MockGen. DO NOT EDIT.
// Source: internal/catalog/service/subcategory.go
//
// Generated by this command:
//
//	mockgen -source=internal/catalog/service/subcategory.go -destination=internal/catalog/service/mock/mock_subcategory.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	entity "github.com/hexley21/fixup/internal/catalog/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockSubcategory is a mock of Subcategory interface.
type MockSubcategory struct {
	ctrl     *gomock.Controller
	recorder *MockSubcategoryMockRecorder
}

// MockSubcategoryMockRecorder is the mock recorder for MockSubcategory.
type MockSubcategoryMockRecorder struct {
	mock *MockSubcategory
}

// NewMockSubcategory creates a new mock instance.
func NewMockSubcategory(ctrl *gomock.Controller) *MockSubcategory {
	mock := &MockSubcategory{ctrl: ctrl}
	mock.recorder = &MockSubcategoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubcategory) EXPECT() *MockSubcategoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubcategory) Create(ctx context.Context, info entity.SubcategoryInfo) (entity.Subcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, info)
	ret0, _ := ret[0].(entity.Subcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubcategoryMockRecorder) Create(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubcategory)(nil).Create), ctx, info)
}

// Delete mocks base method.
func (m *MockSubcategory) Delete(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubcategoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubcategory)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockSubcategory) Get(ctx context.Context, id int32) (entity.Subcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(entity.Subcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubcategoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubcategory)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockSubcategory) List(ctx context.Context, limit, offset int32) ([]entity.Subcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]entity.Subcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSubcategoryMockRecorder) List(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSubcategory)(nil).List), ctx, limit, offset)
}

// ListByCategoryId mocks base method.
func (m *MockSubcategory) ListByCategoryId(ctx context.Context, categoryID, limit, offset int32) ([]entity.Subcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByCategoryId", ctx, categoryID, limit, offset)
	ret0, _ := ret[0].([]entity.Subcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByCategoryId indicates an expected call of ListByCategoryId.
func (mr *MockSubcategoryMockRecorder) ListByCategoryId(ctx, categoryID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByCategoryId", reflect.TypeOf((*MockSubcategory)(nil).ListByCategoryId), ctx, categoryID, limit, offset)
}

// ListByTypeId mocks base method.
func (m *MockSubcategory) ListByTypeId(ctx context.Context, typeID, limit, offset int32) ([]entity.Subcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTypeId", ctx, typeID, limit, offset)
	ret0, _ := ret[0].([]entity.Subcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTypeId indicates an expected call of ListByTypeId.
func (mr *MockSubcategoryMockRecorder) ListByTypeId(ctx, typeID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTypeId", reflect.TypeOf((*MockSubcategory)(nil).ListByTypeId), ctx, typeID, limit, offset)
}

// Update mocks base method.
func (m *MockSubcategory) Update(ctx context.Context, id int32, info entity.SubcategoryInfo) (entity.Subcategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, info)
	ret0, _ := ret[0].(entity.Subcategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSubcategoryMockRecorder) Update(ctx, id, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubcategory)(nil).Update), ctx, id, info)
}
