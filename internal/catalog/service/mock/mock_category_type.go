// Code generated by MockGen. DO NOT EDIT.
// Source: internal/catalog/service/category_type.go
//
// Generated by this command:
//
//	mockgen -source=internal/catalog/service/category_type.go -destination=internal/catalog/service/mock/mock_category_type.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	dto "github.com/hexley21/fixup/internal/catalog/delivery/http/v1/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryTypeService is a mock of CategoryTypeService interface.
type MockCategoryTypeService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryTypeServiceMockRecorder
}

// MockCategoryTypeServiceMockRecorder is the mock recorder for MockCategoryTypeService.
type MockCategoryTypeServiceMockRecorder struct {
	mock *MockCategoryTypeService
}

// NewMockCategoryTypeService creates a new mock instance.
func NewMockCategoryTypeService(ctrl *gomock.Controller) *MockCategoryTypeService {
	mock := &MockCategoryTypeService{ctrl: ctrl}
	mock.recorder = &MockCategoryTypeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryTypeService) EXPECT() *MockCategoryTypeServiceMockRecorder {
	return m.recorder
}

// CreateCategoryType mocks base method.
func (m *MockCategoryTypeService) CreateCategoryType(ctx context.Context, createCategoryDto dto.CreateCategoryTypeDTO) (dto.CategoryTypeDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategoryType", ctx, createCategoryDto)
	ret0, _ := ret[0].(dto.CategoryTypeDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategoryType indicates an expected call of CreateCategoryType.
func (mr *MockCategoryTypeServiceMockRecorder) CreateCategoryType(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategoryType", reflect.TypeOf((*MockCategoryTypeService)(nil).CreateCategoryType), ctx, dto)
}

// DeleteCategoryTypeById mocks base method.
func (m *MockCategoryTypeService) DeleteCategoryTypeById(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategoryTypeById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategoryTypeById indicates an expected call of DeleteCategoryTypeById.
func (mr *MockCategoryTypeServiceMockRecorder) DeleteCategoryTypeById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategoryTypeById", reflect.TypeOf((*MockCategoryTypeService)(nil).DeleteCategoryTypeById), ctx, id)
}

// GetCategoryTypeById mocks base method.
func (m *MockCategoryTypeService) GetCategoryTypeById(ctx context.Context, id int32) (dto.CategoryTypeDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTypeById", ctx, id)
	ret0, _ := ret[0].(dto.CategoryTypeDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryTypeById indicates an expected call of GetCategoryTypeById.
func (mr *MockCategoryTypeServiceMockRecorder) GetCategoryTypeById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTypeById", reflect.TypeOf((*MockCategoryTypeService)(nil).GetCategoryTypeById), ctx, id)
}

// GetCategoryTypes mocks base method.
func (m *MockCategoryTypeService) GetCategoryTypes(ctx context.Context, page, per_page int32) ([]dto.CategoryTypeDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTypes", ctx, page, per_page)
	ret0, _ := ret[0].([]dto.CategoryTypeDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryTypes indicates an expected call of GetCategoryTypes.
func (mr *MockCategoryTypeServiceMockRecorder) GetCategoryTypes(ctx, page, per_page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTypes", reflect.TypeOf((*MockCategoryTypeService)(nil).GetCategoryTypes), ctx, page, per_page)
}

// UpdateCategoryTypeById mocks base method.
func (m *MockCategoryTypeService) UpdateCategoryTypeById(ctx context.Context, id int32, dto dto.PatchCategoryTypeDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryTypeById", ctx, id, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategoryTypeById indicates an expected call of UpdateCategoryTypeById.
func (mr *MockCategoryTypeServiceMockRecorder) UpdateCategoryTypeById(ctx, id, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryTypeById", reflect.TypeOf((*MockCategoryTypeService)(nil).UpdateCategoryTypeById), ctx, id, dto)
}
