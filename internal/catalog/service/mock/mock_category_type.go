// Code generated by MockGen. DO NOT EDIT.
// Source: internal/catalog/service/category_type.go
//
// Generated by this command:
//
//	mockgen -source=internal/catalog/service/category_type.go -destination=internal/catalog/service/mock/mock_category_type.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	domain "github.com/hexley21/fixup/internal/catalog/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryTypeService is a mock of CategoryTypeService interface.
type MockCategoryTypeService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryTypeServiceMockRecorder
}

// MockCategoryTypeServiceMockRecorder is the mock recorder for MockCategoryTypeService.
type MockCategoryTypeServiceMockRecorder struct {
	mock *MockCategoryTypeService
}

// NewMockCategoryTypeService creates a new mock instance.
func NewMockCategoryTypeService(ctrl *gomock.Controller) *MockCategoryTypeService {
	mock := &MockCategoryTypeService{ctrl: ctrl}
	mock.recorder = &MockCategoryTypeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryTypeService) EXPECT() *MockCategoryTypeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryTypeService) Create(ctx context.Context, name string) (domain.CategoryType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name)
	ret0, _ := ret[0].(domain.CategoryType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryTypeServiceMockRecorder) Create(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryTypeService)(nil).Create), ctx, name)
}

// Delete mocks base method.
func (m *MockCategoryTypeService) Delete(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryTypeServiceMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryTypeService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockCategoryTypeService) Get(ctx context.Context, id int32) (domain.CategoryType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(domain.CategoryType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCategoryTypeServiceMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCategoryTypeService)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockCategoryTypeService) List(ctx context.Context, limit, offset int64) ([]domain.CategoryType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]domain.CategoryType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCategoryTypeServiceMockRecorder) List(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCategoryTypeService)(nil).List), ctx, limit, offset)
}

// Update mocks base method.
func (m *MockCategoryTypeService) Update(ctx context.Context, id int32, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCategoryTypeServiceMockRecorder) Update(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryTypeService)(nil).Update), ctx, id, name)
}
