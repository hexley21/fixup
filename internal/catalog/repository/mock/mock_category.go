// Code generated by MockGen. DO NOT EDIT.
// Source: internal/catalog/repository/category.go
//
// Generated by this command:
//
//	mockgen -source=internal/catalog/repository/category.go -destination=internal/catalog/repository/mock/mock_category.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/hexley21/fixup/internal/catalog/entity"
	repository "github.com/hexley21/fixup/internal/catalog/repository"
	postgres "github.com/hexley21/fixup/pkg/infra/postgres"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryRepository) CreateCategory(ctx context.Context, arg repository.CreateCategoryParams) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, arg)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryRepositoryMockRecorder) CreateCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryRepository)(nil).CreateCategory), ctx, arg)
}

// DeleteCategoryById mocks base method.
func (m *MockCategoryRepository) DeleteCategoryById(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategoryById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategoryById indicates an expected call of DeleteCategoryById.
func (mr *MockCategoryRepositoryMockRecorder) DeleteCategoryById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategoryById", reflect.TypeOf((*MockCategoryRepository)(nil).DeleteCategoryById), ctx, id)
}

// GetCategories mocks base method.
func (m *MockCategoryRepository) GetCategories(ctx context.Context, offset, limit int32) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", ctx, offset, limit)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockCategoryRepositoryMockRecorder) GetCategories(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockCategoryRepository)(nil).GetCategories), ctx, offset, limit)
}

// GetCategoriesByTypeId mocks base method.
func (m *MockCategoryRepository) GetCategoriesByTypeId(ctx context.Context, id, offset, limit int32) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoriesByTypeId", ctx, id, offset, limit)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoriesByTypeId indicates an expected call of GetCategoriesByTypeId.
func (mr *MockCategoryRepositoryMockRecorder) GetCategoriesByTypeId(ctx, id, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoriesByTypeId", reflect.TypeOf((*MockCategoryRepository)(nil).GetCategoriesByTypeId), ctx, id, offset, limit)
}

// GetCategoryById mocks base method.
func (m *MockCategoryRepository) GetCategoryById(ctx context.Context, id int32) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryById", ctx, id)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryById indicates an expected call of GetCategoryById.
func (mr *MockCategoryRepositoryMockRecorder) GetCategoryById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryById", reflect.TypeOf((*MockCategoryRepository)(nil).GetCategoryById), ctx, id)
}

// UpdateCategoryById mocks base method.
func (m *MockCategoryRepository) UpdateCategoryById(ctx context.Context, arg repository.UpdateCategoryByIdParams) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryById", ctx, arg)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategoryById indicates an expected call of UpdateCategoryById.
func (mr *MockCategoryRepositoryMockRecorder) UpdateCategoryById(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryById", reflect.TypeOf((*MockCategoryRepository)(nil).UpdateCategoryById), ctx, arg)
}

// WithTx mocks base method.
func (m *MockCategoryRepository) WithTx(q postgres.PGXQuerier) repository.CategoryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", q)
	ret0, _ := ret[0].(repository.CategoryRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockCategoryRepositoryMockRecorder) WithTx(q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCategoryRepository)(nil).WithTx), q)
}
