// Code generated by MockGen. DO NOT EDIT.
// Source: internal/catalog/repository/category.go
//
// Generated by this command:
//
//	mockgen -source=internal/catalog/repository/category.go -destination=internal/catalog/repository/mock/mock_category.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/hexley21/fixup/internal/catalog/domain"
	repository "github.com/hexley21/fixup/internal/catalog/repository"
	postgres "github.com/hexley21/fixup/pkg/infra/postgres"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryRepository) Create(ctx context.Context, info domain.CategoryInfo) (repository.CategoryModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, info)
	ret0, _ := ret[0].(repository.CategoryModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryRepositoryMockRecorder) Create(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryRepository)(nil).Create), ctx, info)
}

// Delete mocks base method.
func (m *MockCategoryRepository) Delete(ctx context.Context, id int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockCategoryRepository) Get(ctx context.Context, id int32) (repository.CategoryModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(repository.CategoryModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCategoryRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCategoryRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockCategoryRepository) List(ctx context.Context, limit, offset int64) ([]repository.CategoryModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]repository.CategoryModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCategoryRepositoryMockRecorder) List(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCategoryRepository)(nil).List), ctx, limit, offset)
}

// ListByTypeId mocks base method.
func (m *MockCategoryRepository) ListByTypeId(ctx context.Context, id int32, limit, offset int64) ([]repository.CategoryModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByTypeId", ctx, id, limit, offset)
	ret0, _ := ret[0].([]repository.CategoryModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByTypeId indicates an expected call of ListByTypeId.
func (mr *MockCategoryRepositoryMockRecorder) ListByTypeId(ctx, id, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByTypeId", reflect.TypeOf((*MockCategoryRepository)(nil).ListByTypeId), ctx, id, limit, offset)
}

// Update mocks base method.
func (m *MockCategoryRepository) Update(ctx context.Context, id int32, info domain.CategoryInfo) (repository.CategoryModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, info)
	ret0, _ := ret[0].(repository.CategoryModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCategoryRepositoryMockRecorder) Update(ctx, id, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryRepository)(nil).Update), ctx, id, info)
}

// WithTx mocks base method.
func (m *MockCategoryRepository) WithTx(q postgres.PGXQuerier) repository.CategoryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", q)
	ret0, _ := ret[0].(repository.CategoryRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockCategoryRepositoryMockRecorder) WithTx(q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCategoryRepository)(nil).WithTx), q)
}
