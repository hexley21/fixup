// Code generated by MockGen. DO NOT EDIT.
// Source: internal/catalog/repository/category_type.go
//
// Generated by this command:
//
//	mockgen -source=internal/catalog/repository/category_type.go -destination=internal/catalog/repository/mock/mock_category_type.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	repository "github.com/hexley21/fixup/internal/catalog/repository"
	postgres "github.com/hexley21/fixup/pkg/infra/postgres"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryTypeRepository is a mock of CategoryTypeRepository interface.
type MockCategoryTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryTypeRepositoryMockRecorder
}

// MockCategoryTypeRepositoryMockRecorder is the mock recorder for MockCategoryTypeRepository.
type MockCategoryTypeRepositoryMockRecorder struct {
	mock *MockCategoryTypeRepository
}

// NewMockCategoryTypeRepository creates a new mock instance.
func NewMockCategoryTypeRepository(ctrl *gomock.Controller) *MockCategoryTypeRepository {
	mock := &MockCategoryTypeRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryTypeRepository) EXPECT() *MockCategoryTypeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryTypeRepository) Create(ctx context.Context, name string) (repository.CategoryTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name)
	ret0, _ := ret[0].(repository.CategoryTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryTypeRepositoryMockRecorder) Create(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryTypeRepository)(nil).Create), ctx, name)
}

// Delete mocks base method.
func (m *MockCategoryTypeRepository) Delete(ctx context.Context, id int32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryTypeRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryTypeRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockCategoryTypeRepository) Get(ctx context.Context, id int32) (repository.CategoryTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(repository.CategoryTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCategoryTypeRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCategoryTypeRepository)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockCategoryTypeRepository) List(ctx context.Context, offset, limit int32) ([]repository.CategoryTypeModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, offset, limit)
	ret0, _ := ret[0].([]repository.CategoryTypeModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCategoryTypeRepositoryMockRecorder) List(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCategoryTypeRepository)(nil).List), ctx, offset, limit)
}

// Update mocks base method.
func (m *MockCategoryTypeRepository) Update(ctx context.Context, id int32, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCategoryTypeRepositoryMockRecorder) Update(ctx, id, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryTypeRepository)(nil).Update), ctx, id, name)
}

// WithTx mocks base method.
func (m *MockCategoryTypeRepository) WithTx(q postgres.PGXQuerier) repository.CategoryTypeRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", q)
	ret0, _ := ret[0].(repository.CategoryTypeRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockCategoryTypeRepositoryMockRecorder) WithTx(q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCategoryTypeRepository)(nil).WithTx), q)
}
