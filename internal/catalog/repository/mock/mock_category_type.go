// Code generated by MockGen. DO NOT EDIT.
// Source: internal/catalog/repository/category_type.go
//
// Generated by this command:
//
//	mockgen -source=internal/catalog/repository/category_type.go -destination=internal/catalog/repository/mock/mock_category_type.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/hexley21/fixup/internal/catalog/entity"
	repository "github.com/hexley21/fixup/internal/catalog/repository"
	postgres "github.com/hexley21/fixup/pkg/infra/postgres"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryTypeRepository is a mock of CategoryTypeRepository interface.
type MockCategoryTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryTypeRepositoryMockRecorder
}

// MockCategoryTypeRepositoryMockRecorder is the mock recorder for MockCategoryTypeRepository.
type MockCategoryTypeRepositoryMockRecorder struct {
	mock *MockCategoryTypeRepository
}

// NewMockCategoryTypeRepository creates a new mock instance.
func NewMockCategoryTypeRepository(ctrl *gomock.Controller) *MockCategoryTypeRepository {
	mock := &MockCategoryTypeRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryTypeRepository) EXPECT() *MockCategoryTypeRepositoryMockRecorder {
	return m.recorder
}

// CreateCategoryType mocks base method.
func (m *MockCategoryTypeRepository) CreateCategoryType(ctx context.Context, name string) (entity.CategoryType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategoryType", ctx, name)
	ret0, _ := ret[0].(entity.CategoryType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategoryType indicates an expected call of CreateCategoryType.
func (mr *MockCategoryTypeRepositoryMockRecorder) CreateCategoryType(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategoryType", reflect.TypeOf((*MockCategoryTypeRepository)(nil).CreateCategoryType), ctx, name)
}

// DeleteCategoryTypeById mocks base method.
func (m *MockCategoryTypeRepository) DeleteCategoryTypeById(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategoryTypeById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategoryTypeById indicates an expected call of DeleteCategoryTypeById.
func (mr *MockCategoryTypeRepositoryMockRecorder) DeleteCategoryTypeById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategoryTypeById", reflect.TypeOf((*MockCategoryTypeRepository)(nil).DeleteCategoryTypeById), ctx, id)
}

// GetCategoryTypeById mocks base method.
func (m *MockCategoryTypeRepository) GetCategoryTypeById(ctx context.Context, id int32) (entity.CategoryType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTypeById", ctx, id)
	ret0, _ := ret[0].(entity.CategoryType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryTypeById indicates an expected call of GetCategoryTypeById.
func (mr *MockCategoryTypeRepositoryMockRecorder) GetCategoryTypeById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTypeById", reflect.TypeOf((*MockCategoryTypeRepository)(nil).GetCategoryTypeById), ctx, id)
}

// GetCategoryTypes mocks base method.
func (m *MockCategoryTypeRepository) GetCategoryTypes(ctx context.Context, offset, limit int32) ([]entity.CategoryType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryTypes", ctx, offset, limit)
	ret0, _ := ret[0].([]entity.CategoryType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryTypes indicates an expected call of GetCategoryTypes.
func (mr *MockCategoryTypeRepositoryMockRecorder) GetCategoryTypes(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryTypes", reflect.TypeOf((*MockCategoryTypeRepository)(nil).GetCategoryTypes), ctx, offset, limit)
}

// UpdateCategoryTypeById mocks base method.
func (m *MockCategoryTypeRepository) UpdateCategoryTypeById(ctx context.Context, arg repository.UpdateCategoryTypeByIdParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryTypeById", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategoryTypeById indicates an expected call of UpdateCategoryTypeById.
func (mr *MockCategoryTypeRepositoryMockRecorder) UpdateCategoryTypeById(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryTypeById", reflect.TypeOf((*MockCategoryTypeRepository)(nil).UpdateCategoryTypeById), ctx, arg)
}

// WithTx mocks base method.
func (m *MockCategoryTypeRepository) WithTx(q postgres.PGXQuerier) repository.CategoryTypeRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", q)
	ret0, _ := ret[0].(repository.CategoryTypeRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockCategoryTypeRepositoryMockRecorder) WithTx(q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCategoryTypeRepository)(nil).WithTx), q)
}
