// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/infra/s3/s3.go
//
// Generated by this command:
//
//	mockgen -source=pkg/infra/s3/s3.go -destination=pkg/infra/s3/mock/mock_s3.go
//

// Package mock_s3 is a generated GoMock package.
package mock_s3

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBucket is a mock of Bucket interface.
type MockBucket struct {
	ctrl     *gomock.Controller
	recorder *MockBucketMockRecorder
}

// MockBucketMockRecorder is the mock recorder for MockBucket.
type MockBucketMockRecorder struct {
	mock *MockBucket
}

// NewMockBucket creates a new mock instance.
func NewMockBucket(ctrl *gomock.Controller) *MockBucket {
	mock := &MockBucket{ctrl: ctrl}
	mock.recorder = &MockBucketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBucket) EXPECT() *MockBucketMockRecorder {
	return m.recorder
}

// DeleteObject mocks base method.
func (m *MockBucket) DeleteObject(ctx context.Context, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", ctx, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockBucketMockRecorder) DeleteObject(ctx, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockBucket)(nil).DeleteObject), ctx, fileName)
}

// GetObject mocks base method.
func (m *MockBucket) GetObject(ctx context.Context, fileName string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, fileName)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockBucketMockRecorder) GetObject(ctx, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockBucket)(nil).GetObject), ctx, fileName)
}

// PutObject mocks base method.
func (m *MockBucket) PutObject(ctx context.Context, file io.Reader, directory, fileName string, fileSize int64, contentType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, file, directory, fileName, fileSize, contentType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *MockBucketMockRecorder) PutObject(ctx, file, directory, fileName, fileSize, contentType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockBucket)(nil).PutObject), ctx, file, directory, fileName, fileSize, contentType)
}
