// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/infra/cdn/url_signer.go
//
// Generated by this command:
//
//	mockgen -source=pkg/infra/cdn/url_signer.go -destination=pkg/infra/cdn/mock/mock_url_signer.go
//

// Package mock_cdn is a generated GoMock package.
package mock_cdn

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockURLSigner is a mock of URLSigner interface.
type MockURLSigner struct {
	ctrl     *gomock.Controller
	recorder *MockURLSignerMockRecorder
}

// MockURLSignerMockRecorder is the mock recorder for MockURLSigner.
type MockURLSignerMockRecorder struct {
	mock *MockURLSigner
}

// NewMockURLSigner creates a new mock instance.
func NewMockURLSigner(ctrl *gomock.Controller) *MockURLSigner {
	mock := &MockURLSigner{ctrl: ctrl}
	mock.recorder = &MockURLSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLSigner) EXPECT() *MockURLSignerMockRecorder {
	return m.recorder
}

// SignURL mocks base method.
func (m *MockURLSigner) SignURL(pictureName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignURL", pictureName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignURL indicates an expected call of SignURL.
func (mr *MockURLSignerMockRecorder) SignURL(pictureName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignURL", reflect.TypeOf((*MockURLSigner)(nil).SignURL), pictureName)
}
