// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/http/writer/writer.go
//
// Generated by this command:
//
//	mockgen -source=pkg/http/writer/writer.go -destination=pkg/http/writer/mock/mock_writer.go
//

// Package mock_writer is a generated GoMock package.
package mock_writer

import (
	http "net/http"
	reflect "reflect"

	rest "github.com/hexley21/fixup/pkg/http/rest"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPWriter is a mock of HTTPWriter interface.
type MockHTTPWriter struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPWriterMockRecorder
}

// MockHTTPWriterMockRecorder is the mock recorder for MockHTTPWriter.
type MockHTTPWriterMockRecorder struct {
	mock *MockHTTPWriter
}

// NewMockHTTPWriter creates a new mock instance.
func NewMockHTTPWriter(ctrl *gomock.Controller) *MockHTTPWriter {
	mock := &MockHTTPWriter{ctrl: ctrl}
	mock.recorder = &MockHTTPWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPWriter) EXPECT() *MockHTTPWriterMockRecorder {
	return m.recorder
}

// WriteData mocks base method.
func (m *MockHTTPWriter) WriteData(w http.ResponseWriter, code int, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteData", w, code, data)
}

// WriteData indicates an expected call of WriteData.
func (mr *MockHTTPWriterMockRecorder) WriteData(w, code, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteData", reflect.TypeOf((*MockHTTPWriter)(nil).WriteData), w, code, data)
}

// WriteError mocks base method.
func (m *MockHTTPWriter) WriteError(w http.ResponseWriter, err *rest.ErrorResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteError", w, err)
}

// WriteError indicates an expected call of WriteError.
func (mr *MockHTTPWriterMockRecorder) WriteError(w, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteError", reflect.TypeOf((*MockHTTPWriter)(nil).WriteError), w, err)
}

// WriteNoContent mocks base method.
func (m *MockHTTPWriter) WriteNoContent(w http.ResponseWriter, code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteNoContent", w, code)
}

// WriteNoContent indicates an expected call of WriteNoContent.
func (mr *MockHTTPWriterMockRecorder) WriteNoContent(w, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteNoContent", reflect.TypeOf((*MockHTTPWriter)(nil).WriteNoContent), w, code)
}

// MockHTTPDataWriter is a mock of HTTPDataWriter interface.
type MockHTTPDataWriter struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPDataWriterMockRecorder
}

// MockHTTPDataWriterMockRecorder is the mock recorder for MockHTTPDataWriter.
type MockHTTPDataWriterMockRecorder struct {
	mock *MockHTTPDataWriter
}

// NewMockHTTPDataWriter creates a new mock instance.
func NewMockHTTPDataWriter(ctrl *gomock.Controller) *MockHTTPDataWriter {
	mock := &MockHTTPDataWriter{ctrl: ctrl}
	mock.recorder = &MockHTTPDataWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPDataWriter) EXPECT() *MockHTTPDataWriterMockRecorder {
	return m.recorder
}

// WriteData mocks base method.
func (m *MockHTTPDataWriter) WriteData(w http.ResponseWriter, code int, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteData", w, code, data)
}

// WriteData indicates an expected call of WriteData.
func (mr *MockHTTPDataWriterMockRecorder) WriteData(w, code, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteData", reflect.TypeOf((*MockHTTPDataWriter)(nil).WriteData), w, code, data)
}

// WriteNoContent mocks base method.
func (m *MockHTTPDataWriter) WriteNoContent(w http.ResponseWriter, code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteNoContent", w, code)
}

// WriteNoContent indicates an expected call of WriteNoContent.
func (mr *MockHTTPDataWriterMockRecorder) WriteNoContent(w, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteNoContent", reflect.TypeOf((*MockHTTPDataWriter)(nil).WriteNoContent), w, code)
}

// MockHTTPErrorWriter is a mock of HTTPErrorWriter interface.
type MockHTTPErrorWriter struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPErrorWriterMockRecorder
}

// MockHTTPErrorWriterMockRecorder is the mock recorder for MockHTTPErrorWriter.
type MockHTTPErrorWriterMockRecorder struct {
	mock *MockHTTPErrorWriter
}

// NewMockHTTPErrorWriter creates a new mock instance.
func NewMockHTTPErrorWriter(ctrl *gomock.Controller) *MockHTTPErrorWriter {
	mock := &MockHTTPErrorWriter{ctrl: ctrl}
	mock.recorder = &MockHTTPErrorWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPErrorWriter) EXPECT() *MockHTTPErrorWriterMockRecorder {
	return m.recorder
}

// WriteError mocks base method.
func (m *MockHTTPErrorWriter) WriteError(w http.ResponseWriter, err *rest.ErrorResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteError", w, err)
}

// WriteError indicates an expected call of WriteError.
func (mr *MockHTTPErrorWriterMockRecorder) WriteError(w, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteError", reflect.TypeOf((*MockHTTPErrorWriter)(nil).WriteError), w, err)
}
