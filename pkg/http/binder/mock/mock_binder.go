// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/http/binder/binder.go
//
// Generated by this command:
//
//	mockgen -source=pkg/http/binder/binder.go -destination=pkg/http/binder/mock/mock_binder.go
//

// Package mock_binder is a generated GoMock package.
package mock_binder

import (
	multipart "mime/multipart"
	http "net/http"
	url "net/url"
	reflect "reflect"

	rest "github.com/hexley21/fixup/pkg/http/rest"
	gomock "go.uber.org/mock/gomock"
)

// MockFullBinder is a mock of FullBinder interface.
type MockFullBinder struct {
	ctrl     *gomock.Controller
	recorder *MockFullBinderMockRecorder
}

// MockFullBinderMockRecorder is the mock recorder for MockFullBinder.
type MockFullBinderMockRecorder struct {
	mock *MockFullBinder
}

// NewMockFullBinder creates a new mock instance.
func NewMockFullBinder(ctrl *gomock.Controller) *MockFullBinder {
	mock := &MockFullBinder{ctrl: ctrl}
	mock.recorder = &MockFullBinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFullBinder) EXPECT() *MockFullBinderMockRecorder {
	return m.recorder
}

// BindForm mocks base method.
func (m *MockFullBinder) BindForm(r *http.Request) (url.Values, *rest.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindForm", r)
	ret0, _ := ret[0].(url.Values)
	ret1, _ := ret[1].(*rest.ErrorResponse)
	return ret0, ret1
}

// BindForm indicates an expected call of BindForm.
func (mr *MockFullBinderMockRecorder) BindForm(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindForm", reflect.TypeOf((*MockFullBinder)(nil).BindForm), r)
}

// BindJSON mocks base method.
func (m *MockFullBinder) BindJSON(r *http.Request, i any) *rest.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindJSON", r, i)
	ret0, _ := ret[0].(*rest.ErrorResponse)
	return ret0
}

// BindJSON indicates an expected call of BindJSON.
func (mr *MockFullBinderMockRecorder) BindJSON(r, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindJSON", reflect.TypeOf((*MockFullBinder)(nil).BindJSON), r, i)
}

// BindMultipartForm mocks base method.
func (m *MockFullBinder) BindMultipartForm(r *http.Request, maxSize int64) (*multipart.Form, *rest.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindMultipartForm", r, maxSize)
	ret0, _ := ret[0].(*multipart.Form)
	ret1, _ := ret[1].(*rest.ErrorResponse)
	return ret0, ret1
}

// BindMultipartForm indicates an expected call of BindMultipartForm.
func (mr *MockFullBinderMockRecorder) BindMultipartForm(r, maxSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindMultipartForm", reflect.TypeOf((*MockFullBinder)(nil).BindMultipartForm), r, maxSize)
}

// MockJSONBinder is a mock of JSONBinder interface.
type MockJSONBinder struct {
	ctrl     *gomock.Controller
	recorder *MockJSONBinderMockRecorder
}

// MockJSONBinderMockRecorder is the mock recorder for MockJSONBinder.
type MockJSONBinderMockRecorder struct {
	mock *MockJSONBinder
}

// NewMockJSONBinder creates a new mock instance.
func NewMockJSONBinder(ctrl *gomock.Controller) *MockJSONBinder {
	mock := &MockJSONBinder{ctrl: ctrl}
	mock.recorder = &MockJSONBinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONBinder) EXPECT() *MockJSONBinderMockRecorder {
	return m.recorder
}

// BindJSON mocks base method.
func (m *MockJSONBinder) BindJSON(r *http.Request, i any) *rest.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindJSON", r, i)
	ret0, _ := ret[0].(*rest.ErrorResponse)
	return ret0
}

// BindJSON indicates an expected call of BindJSON.
func (mr *MockJSONBinderMockRecorder) BindJSON(r, i any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindJSON", reflect.TypeOf((*MockJSONBinder)(nil).BindJSON), r, i)
}

// MockFormBinder is a mock of FormBinder interface.
type MockFormBinder struct {
	ctrl     *gomock.Controller
	recorder *MockFormBinderMockRecorder
}

// MockFormBinderMockRecorder is the mock recorder for MockFormBinder.
type MockFormBinderMockRecorder struct {
	mock *MockFormBinder
}

// NewMockFormBinder creates a new mock instance.
func NewMockFormBinder(ctrl *gomock.Controller) *MockFormBinder {
	mock := &MockFormBinder{ctrl: ctrl}
	mock.recorder = &MockFormBinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFormBinder) EXPECT() *MockFormBinderMockRecorder {
	return m.recorder
}

// BindForm mocks base method.
func (m *MockFormBinder) BindForm(r *http.Request) (url.Values, *rest.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindForm", r)
	ret0, _ := ret[0].(url.Values)
	ret1, _ := ret[1].(*rest.ErrorResponse)
	return ret0, ret1
}

// BindForm indicates an expected call of BindForm.
func (mr *MockFormBinderMockRecorder) BindForm(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindForm", reflect.TypeOf((*MockFormBinder)(nil).BindForm), r)
}

// BindMultipartForm mocks base method.
func (m *MockFormBinder) BindMultipartForm(r *http.Request, maxSize int64) (*multipart.Form, *rest.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindMultipartForm", r, maxSize)
	ret0, _ := ret[0].(*multipart.Form)
	ret1, _ := ret[1].(*rest.ErrorResponse)
	return ret0, ret1
}

// BindMultipartForm indicates an expected call of BindMultipartForm.
func (mr *MockFormBinderMockRecorder) BindMultipartForm(r, maxSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindMultipartForm", reflect.TypeOf((*MockFormBinder)(nil).BindMultipartForm), r, maxSize)
}
