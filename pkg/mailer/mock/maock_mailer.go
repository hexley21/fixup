// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/mailer/mailer.go
//
// Generated by this command:
//
//	mockgen -source=pkg/mailer/mailer.go -destination=pkg/mailer/mock/maock_mailer.go
//

// Package mock_mailer is a generated GoMock package.
package mock_mailer

import (
	template "html/template"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMailer is a mock of Mailer interface.
type MockMailer struct {
	ctrl     *gomock.Controller
	recorder *MockMailerMockRecorder
}

// MockMailerMockRecorder is the mock recorder for MockMailer.
type MockMailerMockRecorder struct {
	mock *MockMailer
}

// NewMockMailer creates a new mock instance.
func NewMockMailer(ctrl *gomock.Controller) *MockMailer {
	mock := &MockMailer{ctrl: ctrl}
	mock.recorder = &MockMailerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailer) EXPECT() *MockMailerMockRecorder {
	return m.recorder
}

// SendHTML mocks base method.
func (m *MockMailer) SendHTML(from, to, subject string, template *template.Template, data any, attachment ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{from, to, subject, template, data}
	for _, a := range attachment {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendHTML", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHTML indicates an expected call of SendHTML.
func (mr *MockMailerMockRecorder) SendHTML(from, to, subject, template, data any, attachment ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{from, to, subject, template, data}, attachment...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHTML", reflect.TypeOf((*MockMailer)(nil).SendHTML), varargs...)
}

// SendMessage mocks base method.
func (m *MockMailer) SendMessage(from, to, subject, message string, attachment ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{from, to, subject, message}
	for _, a := range attachment {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMessage", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMailerMockRecorder) SendMessage(from, to, subject, message any, attachment ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{from, to, subject, message}, attachment...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMailer)(nil).SendMessage), varargs...)
}
