basePath: /v1
definitions:
  EmailInput:
    properties:
      email:
        maxLength: 40
        type: string
    required:
    - email
    type: object
  LoginInput:
    properties:
      email:
        maxLength: 40
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  RegisterProviderInput:
    properties:
      email:
        maxLength: 40
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
      personal_id_number:
        type: string
      phone_number:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - personal_id_number
    - phone_number
    type: object
  RegisterUserInput:
    properties:
      email:
        maxLength: 40
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
      phone_number:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone_number
    type: object
  UpdatePasswordInput:
    properties:
      new_password:
        minLength: 8
        type: string
      old_password:
        minLength: 8
        type: string
    required:
    - new_password
    - old_password
    type: object
  UpdateUserInput:
    properties:
      email:
        maxLength: 40
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      phone_number:
        type: string
    type: object
  User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      picture_url:
        type: string
      role:
        type: string
      user_status:
        type: boolean
    type: object
  rest.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  rest.apiResponse-User:
    properties:
      data:
        $ref: '#/definitions/User'
    type: object
host: localhost:8080
info:
  contact: {}
  description: Handles user and authentication operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: User Microservice
  version: 1.0.0-alpha0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and set access and refresh tokens
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: 'Set-Cookie: access_token; HttpOnly, Set-Cookie: refresh_token;
            HttpOnly'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized - Incorrect email or password
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Login a user
      tags:
      - auth
  /auth/logout:
    post:
      description: Erase access and refresh tokens
      responses:
        "200":
          description: 'Set-Cookie: access_token; HttpOnly, Set-Cookie: refresh_token;
            HttpOnly'
          schema:
            type: string
      summary: Logout a user
      tags:
      - auth
  /auth/refresh:
    post:
      description: Refresh the access token using the refresh token
      responses:
        "200":
          description: 'Set-Cookie: access_token; HttpOnly'
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      security:
      - refresh_token: []
      summary: Refresh access token
      tags:
      - auth
  /auth/register/customer:
    post:
      consumes:
      - application/json
      description: Register a new customer with the provided details
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/RegisterUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Register a new customer
      tags:
      - auth
  /auth/register/provider:
    post:
      consumes:
      - application/json
      description: Register a new provider with the provided details
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/RegisterProviderInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "409":
          description: Conflict - User already exists
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Register a new provider
      tags:
      - auth
  /auth/resend-confirmation:
    post:
      consumes:
      - application/json
      description: Resends a confirmation letter to email
      parameters:
      - description: User email
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/EmailInput'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Resent confirmation letter
      tags:
      - auth
  /auth/verify-email:
    get:
      consumes:
      - application/json
      description: Verifies the email of a user using a JWT token provided as a query
        parameter.
      parameters:
      - description: JWT token for email verification
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid id parameter
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: User was not found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Verify email
      tags:
      - auth
  /user/me/change-password:
    patch:
      consumes:
      - application/json
      description: Update the password of an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Password DTO
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UpdatePasswordInput'
      produces:
      - application/json
      responses:
        "201":
          description: Accepted
        "400":
          description: Invalid arguments
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update user password
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID or the currently authenticated user if "me"
        is provided
      parameters:
      - description: User ID or 'me'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: NotFound
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      security:
      - access_token: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve user details by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.apiResponse-User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      security:
      - access_token: []
      summary: Find user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update user data by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.apiResponse-User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      security:
      - access_token: []
      summary: Update user data
      tags:
      - users
  /users/{id}/pfp:
    patch:
      consumes:
      - multipart/form-data
      description: Upload a profile picture for the user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Profile picture file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      security:
      - access_token: []
      summary: Upload profile picture
      tags:
      - users
schemes:
- http
securityDefinitions:
  access_token:
    in: header
    name: Authorization
    type: apiKey
  refresh_token:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
