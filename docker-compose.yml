services:
  swagger-ui:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.swagger
    restart: unless-stopped
    ports:
      - "8081:8080"

  user-db:
    image: postgres:latest
    container_name: user-db
    ports:
      - "5433:5432"
    expose:
      - "5432"
    volumes:
      - ./docker-data/user/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=user
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d user'"]
      interval: 3s
      timeout: 3s
      retries: 60

  catalog-db:
    image: postgis/postgis:latest
    container_name: catalog-db
    ports:
      - "5434:5432"
    expose:
      - "5432"
    volumes:
      - ./docker-data/catalog/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=catalog
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d catalog'"]
      interval: 3s
      timeout: 3s
      retries: 60

  order-db:
    image: postgis/postgis:latest
    container_name: order-db
    ports:
      - "5435:5432"
    expose:
      - "5432"
    volumes:
      - ./docker-data/order/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=order
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d order'"]
      interval: 3s
      timeout: 3s
      retries: 60

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
    restart: unless-stopped
    ports:
        - 9200:9200
    environment:
      - network.host=0.0.0.0
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms750m -Xmx750m
    healthcheck:
        test: ["CMD", "curl", "-s", "-f", "http://elasticsearch:9200/_cat/health"]
        interval: 3s
        timeout: 3s
        retries: 60
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./docker-data/elasticsearch/data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.1
    expose:
      - "5044"
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
     - ES_JAVA_OPTS=-Xms750m -Xmx750m
    volumes:
      - ./config/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.1
    restart: unless-stopped
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.15.1
    restart: unless-stopped
    command: filebeat -e -strict.perms=false
    volumes:
      - ./log/:/log/:ro
      - ./config/elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
    depends_on:
      elasticsearch:
        condition: service_healthy

  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: ./docker/Dockerfile.user
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      user-db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    env_file: .env
    volumes:
      - ./log/user.log:/root/log/user.log

  catalog-service:
    container_name: catalog-service
    build:
      context: .
      dockerfile: ./docker/Dockerfile.catalog
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      catalog-db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    env_file: .env
    volumes:
      - ./log/catalog.log:/root/log/catalog.log

  order-service:
    container_name: order-service
    build:
      context: .
      dockerfile: ./docker/Dockerfile.order
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      order-db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    env_file: .env
    volumes:
      - ./log/order.log:/root/log/order.log

  chat-service:
    container_name: chat-service
    build:
      context: .
      dockerfile: ./docker/Dockerfile.chat
    restart: unless-stopped
    expose:
      - "80"
    env_file: .env
    volumes:
      - ./log/chat.log:/root/log/chat.log

  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: ./docker/Dockerfile.nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - user-service
      - catalog-service
      - order-service
      - chat-service
    volumes:
      - ./docker-data/nginx/logs:/var/log/nginx/
