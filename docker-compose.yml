services:

  setup-elk:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    volumes:
      - ./keys/elk:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup-elk:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    restart: unless-stopped
    volumes:
      - ./keys/elk:/usr/share/elasticsearch/config/certs
      - ./docker-data/es01/data:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        ["CMD-SHELL", "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    restart: unless-stopped
    volumes:
      - ./keys/elk:/usr/share/kibana/config/certs
      - ./docker-data/kibana/data:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        ["CMD-SHELL", "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"]
      interval: 10s
      timeout: 10s
      retries: 120

  metricbeat01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${ELK_VERSION}
    command:
      - --strict.perms=false
    user: root
    volumes:
      - ./keys/elk:/usr/share/metricbeat/certs
      - ./docker-data/metricbeat01/data:/usr/share/metricbeat/data
      - ./config/elk/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600

  filebeat01:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${ELK_VERSION}
    user: root
    command:
      - --strict.perms=false
    volumes:
      - ./docker-data/filebeat01/data:/usr/share/filebeat/data
      - ./config/elk/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./keys/elk:/usr/share/filebeat/certs
      - ./log/:/log/:ro
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600

  logstash01:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${ELK_VERSION}
    user: root
    volumes:
      - ./keys/elk:/usr/share/logstash/certs
      - ./docker-data/logstashdata01/data:/usr/share/logstash/data
      - ./config/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200

  redis01:
    image: docker.io/bitnami/redis-cluster:latest
    restart: unless-stopped
    volumes:
      - ./docker-data/redis01/data/:/bitnami/redis/data/
    environment:
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'REDIS_NODES=redis01 redis02 redis03 redis04 redis05 redis06'

  redis02:
    image: docker.io/bitnami/redis-cluster:latest
    restart: unless-stopped
    volumes:
      - ./docker-data/redis02/data/:/bitnami/redis/data/
    environment:
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'REDIS_NODES=redis01 redis02 redis03 redis04 redis05 redis06'

  redis03:
    image: docker.io/bitnami/redis-cluster:latest
    restart: unless-stopped
    volumes:
      - ./docker-data/redis03/data/:/bitnami/redis/data/
    environment:
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'REDIS_NODES=redis01 redis02 redis03 redis04 redis05 redis06'

  redis04:
    image: docker.io/bitnami/redis-cluster:latest
    restart: unless-stopped
    volumes:
      - ./docker-data/redis04/data/:/bitnami/redis/data/
    environment:
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'REDIS_NODES=redis01 redis02 redis03 redis04 redis05 redis06'

  redis05:
    image: docker.io/bitnami/redis-cluster:latest
    restart: unless-stopped
    volumes:
      - ./docker-data/redis05/data/:/bitnami/redis/data/
    environment:
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'REDIS_NODES=redis01 redis02 redis03 redis04 redis05 redis06'
  
  redis06:
    image: docker.io/bitnami/redis-cluster:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./docker-data/redis06/data/:/bitnami/redis/data/
    environment:
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'REDISCLI_AUTH=${REDIS_PASSWORD}'
      - 'REDIS_CLUSTER_REPLICAS=1'
      - 'REDIS_NODES=redis01 redis02 redis03 redis04 redis05 redis06'
      - 'REDIS_CLUSTER_CREATOR=yes'
    depends_on:
      - redis01
      - redis02
      - redis03
      - redis04
      - redis05
    healthcheck:
      test: ["CMD", "redis-cli","ping"]

  user-db:
    image: postgres:latest
    ports:
      - "5433:5432"
    volumes:
      - ./docker-data/user/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=user
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d user'"]
      interval: 3s
      timeout: 3s
      retries: 60

  catalog-db:
    image: postgis/postgis:latest
    ports:
      - "5434:5432"
    volumes:
      - ./docker-data/catalog/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=catalog
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d catalog'"]
      interval: 3s
      timeout: 3s
      retries: 60

  order-db:
    image: postgis/postgis:latest
    ports:
      - "5435:5432"
    volumes:
      - ./docker-data/order/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=order
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d order'"]
      interval: 3s
      timeout: 3s
      retries: 60

  user-service:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.user
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      user-db:
        condition: service_healthy
      redis06:
        condition: service_healthy
      # es01:
      #   condition: service_healthy
    env_file: .env
    volumes:
      - ./log/user.log:/root/log/user.log

  catalog-service:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.catalog
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      catalog-db:
        condition: service_healthy
      # es01:
      #   condition: service_healthy
    env_file: .env
    volumes:
      - ./log/catalog.log:/root/log/catalog.log

  order-service:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.order
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      order-db:
        condition: service_healthy
      # es01:
      #   condition: service_healthy
    env_file: .env
    volumes:
      - ./log/order.log:/root/log/order.log

  chat-service:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.chat
    restart: unless-stopped
    expose:
      - "80"
    env_file: .env
    volumes:
      - ./log/chat.log:/root/log/chat.log

  nginx:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      - user-service
      - catalog-service
      - order-service
      - chat-service
    volumes:
      - ./docker-data/nginx/logs:/var/log/nginx/

  swagger-ui:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.swagger
    restart: unless-stopped
    ports:
      - "8081:8080"