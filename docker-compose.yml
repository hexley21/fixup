services:
  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: ./docker/Dockerfile.nginx
    ports:
      - "8080:80"
    volumes:
      - ./docker-data/nginx/logs:/var/log/nginx/
    depends_on:
      - user-service

  user-service:
    container_name: user-service
    build:
      context: .
      dockerfile: ./docker/Dockerfile.user
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      user-db:
        condition: service_healthy
      order-db:
        condition: service_healthy
      catalog-db:
        condition: service_healthy
    env_file: .env

  catalog-service:
    container_name: catalog-service
    build:
      context: .
      dockerfile: ./docker/Dockerfile.catalog
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      user-db:
        condition: service_healthy
      order-db:
        condition: service_healthy
      catalog-db:
        condition: service_healthy
    env_file: .env

  order-service:
    container_name: order-service
    build:
      context: .
      dockerfile: ./docker/Dockerfile.order
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      user-db:
        condition: service_healthy
      order-db:
        condition: service_healthy
      catalog-db:
        condition: service_healthy
    env_file: .env

  chat-service:
    container_name: chat-service
    build:
      context: .
      dockerfile: ./docker/Dockerfile.chat
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      user-db:
        condition: service_healthy
      order-db:
        condition: service_healthy
      catalog-db:
        condition: service_healthy
    env_file: .env

  user-db:
    image: postgres:latest
    container_name: user-db
    ports:
      - "5433:5432"
    expose:
      - "5432"
    volumes:
      - ./docker-data/user/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=user
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d user'"]
      interval: 1s
      timeout: 1s
      retries: 30

  catalog-db:
    image: postgis/postgis:latest
    container_name: catalog-db
    ports:
      - "5434:5432"
    expose:
      - "5432"
    volumes:
      - ./docker-data/catalog/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=catalog
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d catalog'"]
      interval: 1s
      timeout: 1s
      retries: 30

  order-db:
    image: postgis/postgis:latest
    container_name: order-db
    ports:
      - "5435:5432"
    expose:
      - "5432"
    volumes:
      - ./docker-data/order/postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=order
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d order'"]
      interval: 1s
      timeout: 1s
      retries: 30

  swagger-ui:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.swagger
    ports:
      - "8081:8080"
