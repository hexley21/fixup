openapi: 3.0.3
info:
  title: User Microservice
  description: Handles user and authentication operations
  version: 1.0.0-alpha0
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8080/api/v1
  - url: https://handy.ge/api/v1
tags:
  - name: Users
  - name: Auth
paths:
  /users/{id}:
    get:
      tags:
        - Users
      summary: Finds user by id
      security:
        - cookie_access_token: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags:
        - Users
      summary: Deletes user by id
      security:
        - cookie_access_token: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: No content, deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    patch:
      tags:
        - Users
      summary: Updates users's details
      security:
        - cookie_access_token: []
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: Update an existent user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /users/me:
    get:
      tags:
        - Users
      summary: Get self user
      security:
        - cookie_access_token: []
      responses:
        '200':
          $ref: '#/components/responses/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
  /users/me/change-password:
    post:
      tags:
        - Users
      summary: Change user password
      security:
        - cookie_access_token: []
      description: Allows a user to change their password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePasswordInput'
      responses:
        '204':
          description: Password changed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
  /register/customer:
    post:
      tags:
        - Auth
      summary: Creates Customer
      requestBody:
        description: Customer Arguments
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomerInput'
      responses:
        '200':
          description: Successful customer register
          headers:
            access_token:
              $ref: '#/components/headers/access_token'
            refresh_token:
              $ref: '#/components/headers/refresh_token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'
  /register/provider:
    post:
      tags:
        - Auth
      summary: Creates Provider
      requestBody:
        description: Provider Arguments
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderInput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProviderInput'
      responses:
        '200':
          description: Successful provider register
          headers:
            access_token:
              $ref: '#/components/headers/access_token'
            refresh_token:
              $ref: '#/components/headers/refresh_token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'
  /login:
    post:
      tags:
        - Auth
      summary: Authenticates user
      responses:
        '200':
          description: Successful login
          headers:
            access_token:
              $ref: '#/components/headers/access_token'
            refresh_token:
              $ref: '#/components/headers/refresh_token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
  /logout:
    post:
      tags:
        - Auth
      summary: Logout user
      responses:
        '200':
          description: Successful login
          headers:
            access_token:
              $ref: '#/components/headers/delete_access_token'
            refresh_token:
              $ref: '#/components/headers/delete_refresh_token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
  /refresh:
    post:
      tags:
        - Auth
      summary: Refresh Access token
      security:
        - cookie_refresh_token: []
      responses:
        '200':
          description: Successful refresh
          headers:
            access_token:
              $ref: '#/components/headers/access_token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
components:
  securitySchemes:
    cookie_access_token:
      type: apiKey
      in: cookie
      name: access_token
    cookie_refresh_token:
      type: apiKey
      in: cookie
      name: refresh_token
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          nullable: false
          example: "123456789012345678"
          description: Snowflake id of the user
        email:
          type: string
          maxLength: 40
          example: example@email.com
        phone_number:
          type: string
          maxLength: 15
          example: 995555555555
        first_name:
          type: string
          maxLength: 50
          minLength: 2
          example: John
        last_name:
          type: string
          maxLength: 50
          minLength: 2
          example: Doe
        hash:
          type: string
          description: Password hash
        role:
          type: string
          enum: 
            - CUSTOMER
            - PROVIDER
            - ADMIN
        user_status:
          type: boolean
          default: false
        created_at:
          type: string
          format: date-time
          default: '2023-08-05T00:00:00Z'
    UserInput:
      type: object
      properties:
        email:
          type: string
          maxLength: 40
          example: example@email.com
        phone_number:
          type: string
          maxLength: 15
          example: 995555555555
        first_name:
          type: string
          maxLength: 50
          minLength: 2
          example: John
        last_name:
          type: string
          maxLength: 50
          minLength: 2
          example: Doe
    CustomerInput:
      type: object
      properties:
        email:
          type: string
          maxLength: 40
          example: example@email.com
        phone_number:
          type: string
          maxLength: 15
          example: 995555555555
        first_name:
          type: string
          maxLength: 50
          minLength: 2
          example: John
        last_name:
          type: string
          maxLength: 50
          minLength: 2
          example: Doe
        password:
          type: string
          example: StrongPassword123
      required:
        - email
        - phone_number
        - first_name
        - last_name
        - password
    ProviderInput:
      type: object
      properties:
        email:
          type: string
          maxLength: 40
          example: example@email.com
        phone_number:
          type: string
          maxLength: 15
          example: 995555555555
        first_name:
          type: string
          maxLength: 50
          minLength: 2
          example: John
        last_name:
          type: string
          maxLength: 50
          minLength: 2
          example: Doe
        password:
          type: string
          example: StrongPassword123
        personal_id_number:
          type: string
          example: 1001001234
      required:
        - email
        - phone_number
        - first_name
        - last_name
        - password
        - personal_id_number
    ChangePasswordInput:
      type: object
      properties:
        current_password:
          type: string
          format: password
          description: The current password of the user.
          example: StrongPassword123
        new_password:
          type: string
          format: password
          description: The new password for the user.
          example: StrongPassword123
      required:
        - current_password
        - new_password
    ApiResponse:
      type: object
      properties:
        data:
          type: object
    BasicError:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicError'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicError'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicError'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicError'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicError'
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BasicError'
    User:
      description: Successful User operation
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ApiResponse'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
  parameters:
    id:
      name: id
      in: path
      description: id of an object
      required: true
      schema:
        type: string
  headers:
    access_token:
      schema: 
        type: string
        example: access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMzQ1Njc4OTAxMjM0NTY3OCIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTUxNjIzOTAyMn0.jqYRtRKBbAOz0tLpO3MSLupWdyLMZPQYSlv5XeA7w4w; Path=/; HttpOnly
    refresh_token:
      schema: 
        type: string
        example: refresh_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMzQ1Njc4OTAxMjM0NTY3OCIsInJvbGUiOiJBRE1JTiIsImlhdCI6MTUxNjIzOTAyMn0.jqYRtRKBbAOz0tLpO3MSLupWdyLMZPQYSlv5XeA7w4w; Path=/; HttpOnly
    delete_access_token:
      schema: 
        type: string
        example: access_token=deleted; Path=/; HttpOnly
    delete_refresh_token:
      schema: 
        type: string
        example: refresh_token=deleted; Path=/; HttpOnly